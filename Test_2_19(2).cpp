//题目描述
//在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。
//
//每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n?1 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。
//
//因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1 ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。
//
//例如有 3 种果子，数目依次为 1 ， 2 ， 9 。可以先将 1 、 2 堆合并，新堆数目为 3 ，耗费体力为 3 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12 ，耗费体力为 12 。所以多多总共耗费体力 =3+12=15 。可以证明 15 为最小的体力耗费值。
//
//输入格式
//共两行。
//第一行是一个整数 n(1≤n≤10000) ，表示果子的种类数。
//
//第二行包含 n 个整数，用空格分隔，第 i 个整数 a 
//i
//?
// (1≤a 
//i
//?
// ≤20000) 是第 i 种果子的数目。
//
//输出格式
//一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2 
//31
//  。
//
//输入输出样例
//输入 #1复制
//
//3 
//1 2 9 
//输出 #1复制
//
//15
//说明/提示
//对于 30% 的数据，保证有 n≤1000：
//
//对于 50% 的数据，保证有 n≤5000；
//
//对于全部的数据，保证有 n≤10000。
#include<bits/stdc++.h>  // 包含C++标准库中几乎所有常用的头文件，方便竞赛编程
#define int long long     // 将int类型定义为long long，防止整数溢出
using namespace std;      // 使用标准命名空间std，避免重复写std::前缀

const int N = 2e6 + 10;   // 定义一个常量N，表示数组的最大容量（虽然这里并未直接使用）

signed main() {           // 程序的入口函数，返回值为int类型
    int n, m;             // 定义两个变量n和m，n表示输入的数字个数，m用于临时存储输入的数字
    cin >> n;             // 从标准输入读取一个整数n，表示有多少个数字需要处理

    priority_queue<int, vector<int>, greater<int>> q;  // 定义一个最小堆优先队列q
    // 优先队列的作用是自动按照从小到大的顺序排列元素，方便每次取出最小的两个数

    for (int i = 0; i < n; i++) {  // 循环n次，读取所有输入的数字
        cin >> m;                  // 从标准输入读取一个数字m
        q.push(m);                 // 将m加入优先队列q
    }

    int ans = 0;                   // 初始化答案变量ans为0，用于累计合并的总代价
    while (q.size() > 1) {         // 当优先队列中元素个数大于1时，继续循环
        int t1 = q.top();          // 取出优先队列中最小的元素t1
        q.pop();                   // 从队列中移除t1
        int t2 = q.top();          // 取出优先队列中第二小的元素t2
        q.pop();                   // 从队列中移除t2

        ans += t1 + t2;            // 将t1和t2的和累加到ans中，表示合并的代价
        q.push(t1 + t2);           // 将t1和t2的和重新加入优先队列
    }

    cout << ans << endl;           // 输出最终的合并代价ans
    return 0;                      // 程序结束，返回0表示正常退出
}
