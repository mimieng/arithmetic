//给定一个集合和 Q 次操作，每个操作可能是以下操作之一：
//
//第一个操作给定整数 x，表示将 x 放入集合。
//
//第二个操作给定整数 x，表示将集合的数分别加上 x。
//
//第三个操作将集合最小的数删除。
//
//对于每个第三个操作，输出你删去的数。
//
//保证 1≤Q≤2×10 
//5
// ，操作种类 op∈{1,2,3}，1≤x≤10 
//9
// 。
//
//输入输出样例
//输入 #1复制
//
//5
//1 3
//1 5
//3
//2 2
//3
//输出 #1复制
//
//3
//7
//输入 #2复制
//
//6
//1 1000000000
//2 1000000000
//2 1000000000
//2 1000000000
//2 1000000000
//3
//输出 #2复制
//
//5000000000
#include<bits/stdc++.h> // 包含标准库，方便使用各种STL容器和算法
#define int long long   // 将int类型定义为long long，方便处理大整数
using namespace std;    // 使用标准命名空间，避免重复写std::

// 定义主函数，返回值为signed，表示有符号整数
signed main()
{
    int q; // 定义变量q，表示操作的次数
    cin >> q; // 从输入读取操作次数q
    int cnt; // 定义变量cnt，用于存储每次操作的类型
    int n; // 定义变量n，用于存储操作中涉及的数值
    int sum = 0; // 定义变量sum，用于存储当前的偏移量，初始值为0

    // 定义一个优先队列，存储整数，按照从小到大的顺序排列
    priority_queue<int, vector<int>, greater<int>> qu;

    // 循环处理q次操作
    while (q--)
    {
        cin >> cnt; // 读取操作类型cnt
        if (cnt == 1) // 如果操作类型为1，表示向队列中添加一个元素
        {
            cin >> n; // 读取要添加的元素n
            qu.push(n - sum); // 将n减去当前偏移量sum后的值加入队列
        }
        if (cnt == 2) // 如果操作类型为2，表示增加偏移量
        {
            cin >> n; // 读取偏移量n
            sum += n; // 将偏移量n加到sum中
        }
        if (cnt == 3) // 如果操作类型为3，表示输出队列中最小的元素并移除它
        {
            cout << qu.top() + sum << endl; // 输出队列顶部元素加上当前偏移量sum
            qu.pop(); // 移除队列顶部元素
        }
    }
    return 0; // 程序结束，返回0
}
